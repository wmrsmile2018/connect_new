// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Справочные таблицы

model duration {
  id         Int          @id @unique @default(autoincrement())
  code       String       @unique
  name       String
}

model role {
  id          Int     @id @unique @default(autoincrement())
  title       String
  description String?
  code        String  @unique
  User        user[]
}

model priority {
  id          Int           @id @unique @default(autoincrement())
  title       String
  description String?
  code        String        @unique
  user        user[]
  UserHistory UserHistory[]
}

model linkType {
  id           Int            @id @unique @default(autoincrement())
  code         String         @unique
  description  String?
  rootUrl      String
  userLinkType userLinkType[]
}

model filter {
  id          Int          @id @unique @default(autoincrement())
  code        String       @unique
  title       String
  description String?
  userFilter  userFilter[]
}

model status {
  id                Int                 @id @unique @default(autoincrement())
  code              String              @unique
  description       String?
  userAnnouncement  userAnnouncement[]
  announcementPhoto announcementPhoto[]
  userPhoto         userPhoto[]
  userMetadata      userMetadata[]
}

// Таблицы фактов
model userFilter {
  id                 Int      @id @default(autoincrement())
  user               user     @relation(fields: [userId], references: [id])
  userId             Int
  filter             filter   @relation(fields: [filterCode], references: [code])
  filterCode         String
  dateTimeOfCreation DateTime @default(now())
  timeZone           String
  location           String

  @@unique([filterCode, userId])
}

model userLinkType {
  id                 Int      @id @default(autoincrement())
  user               user     @relation(fields: [userId], references: [id])
  userId             Int
  linkType           linkType @relation(fields: [linkTypeCode], references: [code])
  linkTypeCode       String
  dateTimeOfCreation DateTime @default(now())
  timeZone           String
  location           String
  idProfile          String

  @@unique([userId, linkTypeCode])
}

model favorite {
  id                 Int      @id @unique @default(autoincrement())
  userSrc            user     @relation("userSrc", fields: [userSrcId], references: [id])
  userSrcId          Int
  userTrg            user     @relation("userTrg", fields: [userTrgId], references: [id])
  userTrgId          Int
  dateTimeOfCreation DateTime @default(now())
  timeZone           String
  location           String
}

model userAnnouncement {
  id                 Int          @id @default(autoincrement())
  announcement       announcement @relation(fields: [announcementId], references: [id])
  announcementId     Int
  user               user         @relation(fields: [userId], references: [id])
  userId             Int
  status             status       @relation(fields: [statusId], references: [id])
  statusId           Int
  dateTimeOfCreation DateTime     @default(now())
  timeZone           String
  location           String
}

model announcementPhoto {
  id                 Int          @id @default(autoincrement())
  announcement       announcement @relation(fields: [announcementId], references: [id])
  announcementId     Int
  status             status       @relation(fields: [statusId], references: [id])
  statusId           Int
  photo              photo        @relation(fields: [photoId], references: [id])
  photoId            Int          @unique
  dateTimeOfCreation DateTime     @default(now())
  timeZone           String
  location           String
}

model userPhoto {
  id                 Int      @id @default(autoincrement())
  user               user     @relation(fields: [userId], references: [id])
  userId             Int
  status             status   @relation(fields: [statusId], references: [id])
  statusId           Int
  photo              photo    @relation(fields: [photoId], references: [id])
  photoId            Int      @unique
  dateTimeOfCreation DateTime @default(now())
  timeZone           String
  location           String
}

model markedCard {
  id                 Int       @id @unique @default(autoincrement())
  user               user      @relation(fields: [userId], references: [id])
  userId             Int
  deadLine           DateTime
  dateTimeOfCreation DateTime  @default(now())
  timeZone           String
  location           String
}

model UserHistory {
  id             Int       @id @unique @default(autoincrement())
  priority       priority? @relation(fields: [priorityCode], references: [code])
  priorityCode   String
  phone          String    @unique
  avatar         Int?
  timeZone       String?
  location       String?
  patronymic     String?
  updateDateTime DateTime?
  address        String?
  longtitude     String?
  jobTitle       String?
  rating         Int?
  firstName      String?
  surname        String?
  description    String?
  latitude       String?
  email          String?   @unique
}

// Таблицы сущностей
model user {
  id                 Int       @id @unique @default(autoincrement())
  role               role      @relation(fields: [roleCode], references: [code])
  roleCode           String
  priority           priority? @relation(fields: [priorityCode], references: [code])
  priorityCode       String
  avatarId           String?
  code               Int
  hash               String
  salt               String
  phone              String    @unique
  dateTimeOfCreation DateTime  @default(now())
  email              String?   @unique
  firstName          String?
  surname            String?
  patronymic         String?
  timeZone           String?
  location           String?
  updateDateTime     DateTime  @updatedAt
  address            String?
  jobTitle           String?
  rating             Int?
  description        String?
  latitude           String?
  longtitude         String?

  favoriteSrc      favorite[]         @relation("userSrc")
  favoriteTrg      favorite[]         @relation("userTrg")
  userFilter       userFilter[]
  userLinkType     userLinkType[]
  userAnnouncement userAnnouncement[]
  userPhoto        userPhoto[]
  markedCard       markedCard[]
  userMetadata     userMetadata[]
}

model userMetadata {
  id                    Int      @id @unique @default(autoincrement())
  user                  user     @relation(fields: [userId], references: [id])
  userId                Int      @unique
  status                status   @relation(fields: [statusId], references: [id])
  statusId              Int
  views                 Int?
  refreshToken          String
  tokenCreationDateTime DateTime @updatedAt
}

model photo {
  id                Int                 @id @unique @default(autoincrement())
  externalId        String
  announcementPhoto announcementPhoto[]
  userPhoto         userPhoto[]
}

model announcement {
  id          Int      @id @unique @default(autoincrement())
  description String
  address     String
  title       String
  deadline    DateTime

  userAnnouncement     userAnnouncement[]
  announcementPhoto    announcementPhoto[]
  announcementMetadata announcementMetadata[]
}

model announcementMetadata {
  id             Int          @id @unique @default(autoincrement())
  views          Int
  announcement   announcement @relation(fields: [announcementId], references: [id])
  announcementId Int
}
